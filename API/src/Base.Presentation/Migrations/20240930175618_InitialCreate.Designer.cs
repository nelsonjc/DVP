// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskingSystem.Infrastructure.Persistencia;

#nullable disable

namespace TaskingSystem.Presentation.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240930175618_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskingSystem.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdPermission");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdUserCreated")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdUserUpdated")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Permission");

                    b.HasIndex("IdUserCreated");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("Permission", "security");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59113ba2-fbeb-4356-af8c-858a5f7eb787"),
                            ActionType = 1,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6638),
                            Entity = "USER",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2")
                        },
                        new
                        {
                            Id = new Guid("4630b441-bc83-4f1f-9600-47802b5bd685"),
                            ActionType = 2,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6641),
                            Entity = "USER",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2")
                        },
                        new
                        {
                            Id = new Guid("939fc5b4-484d-46b2-b0b6-523e780670f0"),
                            ActionType = 3,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6657),
                            Entity = "USER",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2")
                        },
                        new
                        {
                            Id = new Guid("9e5333a7-651d-4001-970a-b5ee57583198"),
                            ActionType = 4,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6658),
                            Entity = "USER",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2")
                        },
                        new
                        {
                            Id = new Guid("0aab002a-26b9-4460-b0ce-dcebfd232aa6"),
                            ActionType = 1,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6659),
                            Entity = "TASK",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2")
                        },
                        new
                        {
                            Id = new Guid("02573a63-e73f-47c4-98ef-10e27557ebe0"),
                            ActionType = 2,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6660),
                            Entity = "TASK",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2")
                        },
                        new
                        {
                            Id = new Guid("f6f008cf-9f05-477f-bf78-83fa14275b45"),
                            ActionType = 3,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6662),
                            Entity = "TASK",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2")
                        },
                        new
                        {
                            Id = new Guid("d34acf6b-7cc0-4bb8-872d-9f7c7189bd1e"),
                            ActionType = 4,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6663),
                            Entity = "TASK",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2")
                        },
                        new
                        {
                            Id = new Guid("fc8779b9-0ca7-4105-8876-453f38a3b0ca"),
                            ActionType = 4,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6665),
                            Entity = "TASK",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2")
                        },
                        new
                        {
                            Id = new Guid("844fd0a0-a715-445d-ad1e-c39fd7033e39"),
                            ActionType = 4,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6666),
                            Entity = "TASK",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2")
                        });
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdRole");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_Role");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role", "security");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7d636c0-54be-472a-9a53-ba17ece3d4d4"),
                            Active = true,
                            Name = "Administrador"
                        },
                        new
                        {
                            Id = new Guid("4cca98ee-83fb-4357-a851-2635841e056e"),
                            Active = true,
                            Name = "Supervisor"
                        },
                        new
                        {
                            Id = new Guid("dd381045-9efa-40f8-afd1-f46879b8c2d7"),
                            Active = true,
                            Name = "Empleado"
                        });
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("IdRole")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdRole");

                    b.Property<Guid>("IdPermission")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdPermission");

                    b.HasKey("IdRole", "IdPermission");

                    b.HasIndex("IdPermission");

                    b.ToTable("RolePermission", "security");

                    b.HasData(
                        new
                        {
                            IdRole = new Guid("c7d636c0-54be-472a-9a53-ba17ece3d4d4"),
                            IdPermission = new Guid("59113ba2-fbeb-4356-af8c-858a5f7eb787")
                        },
                        new
                        {
                            IdRole = new Guid("c7d636c0-54be-472a-9a53-ba17ece3d4d4"),
                            IdPermission = new Guid("4630b441-bc83-4f1f-9600-47802b5bd685")
                        },
                        new
                        {
                            IdRole = new Guid("c7d636c0-54be-472a-9a53-ba17ece3d4d4"),
                            IdPermission = new Guid("939fc5b4-484d-46b2-b0b6-523e780670f0")
                        },
                        new
                        {
                            IdRole = new Guid("c7d636c0-54be-472a-9a53-ba17ece3d4d4"),
                            IdPermission = new Guid("9e5333a7-651d-4001-970a-b5ee57583198")
                        },
                        new
                        {
                            IdRole = new Guid("c7d636c0-54be-472a-9a53-ba17ece3d4d4"),
                            IdPermission = new Guid("0aab002a-26b9-4460-b0ce-dcebfd232aa6")
                        },
                        new
                        {
                            IdRole = new Guid("c7d636c0-54be-472a-9a53-ba17ece3d4d4"),
                            IdPermission = new Guid("02573a63-e73f-47c4-98ef-10e27557ebe0")
                        },
                        new
                        {
                            IdRole = new Guid("c7d636c0-54be-472a-9a53-ba17ece3d4d4"),
                            IdPermission = new Guid("f6f008cf-9f05-477f-bf78-83fa14275b45")
                        },
                        new
                        {
                            IdRole = new Guid("c7d636c0-54be-472a-9a53-ba17ece3d4d4"),
                            IdPermission = new Guid("d34acf6b-7cc0-4bb8-872d-9f7c7189bd1e")
                        },
                        new
                        {
                            IdRole = new Guid("4cca98ee-83fb-4357-a851-2635841e056e"),
                            IdPermission = new Guid("fc8779b9-0ca7-4105-8876-453f38a3b0ca")
                        },
                        new
                        {
                            IdRole = new Guid("4cca98ee-83fb-4357-a851-2635841e056e"),
                            IdPermission = new Guid("844fd0a0-a715-445d-ad1e-c39fd7033e39")
                        },
                        new
                        {
                            IdRole = new Guid("dd381045-9efa-40f8-afd1-f46879b8c2d7"),
                            IdPermission = new Guid("02573a63-e73f-47c4-98ef-10e27557ebe0")
                        },
                        new
                        {
                            IdRole = new Guid("dd381045-9efa-40f8-afd1-f46879b8c2d7"),
                            IdPermission = new Guid("844fd0a0-a715-445d-ad1e-c39fd7033e39")
                        });
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.StatusSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdStatusSystem");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Entity");

                    b.Property<Guid>("IdUserCreated")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdUserUpdated")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_StatusSystem");

                    b.HasIndex("IdUserCreated");

                    b.HasIndex("IdUserUpdated");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StatusSystem", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d40b4c74-d443-4786-b06c-da82691319fa"),
                            Active = true,
                            Code = "PENDING",
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6724),
                            Entity = "TASK",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2"),
                            Name = "Pendiente"
                        },
                        new
                        {
                            Id = new Guid("b1313626-e0c9-4c5f-816e-db9ee365079a"),
                            Active = true,
                            Code = "IN_PROCESS",
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6727),
                            Entity = "TASK",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2"),
                            Name = "En Proceso"
                        },
                        new
                        {
                            Id = new Guid("5e9962dc-a63b-423a-b584-b75b46496f56"),
                            Active = true,
                            Code = "COMPLETED",
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6729),
                            Entity = "TASK",
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2"),
                            Name = "Completada"
                        });
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdUser");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("FullName");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdRole");

                    b.Property<Guid>("IdUserCreated")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdUserUpdated")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserName");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdUserCreated");

                    b.HasIndex("IdUserUpdated");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User", "security");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2"),
                            Active = true,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6554),
                            FullName = "Usuario Administrador",
                            IdRole = new Guid("c7d636c0-54be-472a-9a53-ba17ece3d4d4"),
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2"),
                            Password = "10000.FuFwFM9Ir84N+zAMeRkAUg==.pr10sR5IPgFVX/FVknK7qSd9Z5MUiM3Y6GpgyC0Y6Z0=",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("11695b42-fc05-47ea-b2e5-c96e78460b2b"),
                            Active = true,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6572),
                            FullName = "Usuario Supervidor",
                            IdRole = new Guid("4cca98ee-83fb-4357-a851-2635841e056e"),
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2"),
                            Password = "10000.FuFwFM9Ir84N+zAMeRkAUg==.pr10sR5IPgFVX/FVknK7qSd9Z5MUiM3Y6GpgyC0Y6Z0=",
                            UserName = "super"
                        },
                        new
                        {
                            Id = new Guid("1b823b39-13bc-4aa9-ad80-b8183f317dab"),
                            Active = true,
                            DateCreated = new DateTime(2024, 9, 30, 12, 56, 18, 431, DateTimeKind.Utc).AddTicks(6574),
                            FullName = "Usuario Empleado",
                            IdRole = new Guid("dd381045-9efa-40f8-afd1-f46879b8c2d7"),
                            IdUserCreated = new Guid("f2d08e38-24bf-49b7-929b-d21f065dd6e2"),
                            Password = "10000.FuFwFM9Ir84N+zAMeRkAUg==.pr10sR5IPgFVX/FVknK7qSd9Z5MUiM3Y6GpgyC0Y6Z0=",
                            UserName = "empleado"
                        });
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.WorkItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdTask");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DueDate");

                    b.Property<Guid>("IdStatus")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdStatus");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdUser");

                    b.Property<Guid>("IdUserCreated")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdUserUpdated")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Title");

                    b.HasKey("Id")
                        .HasName("PK_Task");

                    b.HasIndex("IdStatus");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserCreated");

                    b.HasIndex("IdUserUpdated");

                    b.ToTable("Task", "dbo");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.WorkItemFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdTaskFlow");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("DateCreated");

                    b.Property<Guid>("IdNewStatus")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdNewStatus");

                    b.Property<Guid>("IdPreviousStatus")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdPreviousStatus");

                    b.Property<Guid>("IdUserCreated")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdUserCreated");

                    b.Property<Guid>("IdWorkItem")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdWorkItem");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Observation");

                    b.Property<Guid?>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_TaskFlow");

                    b.HasIndex("IdNewStatus");

                    b.HasIndex("IdPreviousStatus");

                    b.HasIndex("IdUserCreated");

                    b.HasIndex("IdWorkItem");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WorkItemFlow", "dbo");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.WorkItemLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdTaskLog");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("DateCreated");

                    b.Property<Guid>("IdUserCreated")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdUserCreated");

                    b.Property<Guid>("IdWorkItem")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdWorkItem");

                    b.Property<string>("LogEvent")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("LogEvent");

                    b.Property<string>("TypeEvent")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TypeEvent");

                    b.Property<Guid?>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_TaskLog");

                    b.HasIndex("IdUserCreated");

                    b.HasIndex("IdWorkItem");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WorkItemLog", "dbo");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.Permission", b =>
                {
                    b.HasOne("TaskingSystem.Domain.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("IdUserCreated")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskingSystem.Domain.Entities.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("IdUserUpdated")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("TaskingSystem.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("IdPermission")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Permission_IdPermission");

                    b.HasOne("TaskingSystem.Domain.Entities.Role", "Role")
                        .WithMany("RolPermissions")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Role_IdRole");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.StatusSystem", b =>
                {
                    b.HasOne("TaskingSystem.Domain.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("IdUserCreated")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskingSystem.Domain.Entities.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("IdUserUpdated")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.User", b =>
                {
                    b.HasOne("TaskingSystem.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.HasOne("TaskingSystem.Domain.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("IdUserCreated")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskingSystem.Domain.Entities.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("IdUserUpdated")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Role");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.WorkItem", b =>
                {
                    b.HasOne("TaskingSystem.Domain.Entities.StatusSystem", "Status")
                        .WithMany()
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskingSystem.Domain.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_User_Task");

                    b.HasOne("TaskingSystem.Domain.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("IdUserCreated")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskingSystem.Domain.Entities.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("IdUserUpdated")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Status");

                    b.Navigation("User");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.WorkItemFlow", b =>
                {
                    b.HasOne("TaskingSystem.Domain.Entities.StatusSystem", "NewStatus")
                        .WithMany()
                        .HasForeignKey("IdNewStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskingSystem.Domain.Entities.StatusSystem", "PreviousStatus")
                        .WithMany()
                        .HasForeignKey("IdPreviousStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskingSystem.Domain.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("IdUserCreated")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskingSystem.Domain.Entities.WorkItem", "WorkItem")
                        .WithMany()
                        .HasForeignKey("IdWorkItem")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Flow_Task");

                    b.HasOne("TaskingSystem.Domain.Entities.WorkItem", null)
                        .WithMany("Flows")
                        .HasForeignKey("WorkItemId");

                    b.Navigation("NewStatus");

                    b.Navigation("PreviousStatus");

                    b.Navigation("UserCreated");

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.WorkItemLog", b =>
                {
                    b.HasOne("TaskingSystem.Domain.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("IdUserCreated")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskingSystem.Domain.Entities.WorkItem", "WorkItem")
                        .WithMany()
                        .HasForeignKey("IdWorkItem")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Log_Task");

                    b.HasOne("TaskingSystem.Domain.Entities.WorkItem", null)
                        .WithMany("Logs")
                        .HasForeignKey("WorkItemId");

                    b.Navigation("UserCreated");

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolPermissions");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskingSystem.Domain.Entities.WorkItem", b =>
                {
                    b.Navigation("Flows");

                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
